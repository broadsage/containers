name: Frontend CI/CD

on:
  push:
    branches: [main, nextjs, develop]
    paths:
      - 'apps/web/**'
      - 'packages/**'
      - '.github/workflows/frontend-ci.yml'
      - 'package.json'
      - 'turbo.json'
  pull_request:
    branches: [main, nextjs]
    paths:
      - 'apps/web/**'
      - 'packages/**'
      - '.github/workflows/frontend-ci.yml'
      - 'package.json'
      - 'turbo.json'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/web
  NODE_VERSION: '20'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read
  id-token: write

jobs:
  setup:
    name: Setup & Cache
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      
      - name: Generate cache key
        id: cache-key
        run: echo "key=node-${{ env.NODE_VERSION }}-${{ hashFiles('yarn.lock', 'package.json', 'apps/web/package.json') }}" >> $GITHUB_OUTPUT
      
      - name: Install dependencies
        run: yarn install --frozen-lockfile

  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 10
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      
      - name: Lint
        run: yarn turbo lint --filter=web
      
      - name: Type check
        run: yarn turbo type-check --filter=web
      
      - name: Run ESLint with SARIF output
        run: |
          cd apps/web
          yarn lint --format @microsoft/eslint-formatter-sarif --output-file eslint-results.sarif
        continue-on-error: true
      
      - name: Upload ESLint SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('apps/web/eslint-results.sarif') != ''
        with:
          sarif_file: apps/web/eslint-results.sarif
          category: eslint

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 15
    
    strategy:
      matrix:
        test-type: [unit, integration]
      fail-fast: false
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      
      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: |
          cd apps/web
          yarn test:coverage --maxWorkers=2 --watchAll=false
        env:
          CI: true
      
      - name: Run integration tests
        if: matrix.test-type == 'integration'
        run: |
          cd apps/web
          yarn test:integration --watchAll=false
        env:
          CI: true
        continue-on-error: true
      
      - name: Upload coverage
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v4
        with:
          files: ./apps/web/coverage/lcov.info
          flags: frontend
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            apps/web/coverage/
            apps/web/junit.xml
          retention-days: 7

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [setup, lint, test]
    timeout-minutes: 15
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      
      - name: Build application
        run: yarn turbo build --filter=web
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/web/.next/
            !apps/web/.next/cache
          retention-days: 1

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 10
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      
      - name: Audit dependencies
        run: |
          yarn audit --json > audit-results.json || true
          yarn audit --level moderate --groups dependencies
        continue-on-error: true
      
      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: audit-results
          path: audit-results.json
          retention-days: 7

  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/nextjs')
    timeout-minutes: 15
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: apps/web/.next
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Container Directory Web
            org.opencontainers.image.description=Next.js frontend for container directory
            org.opencontainers.image.vendor=broadsage
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/web/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: spdx-json
          output-file: sbom.spdx.json
      
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json
          retention-days: 30

  summary:
    name: Summary
    runs-on: ubuntu-latest
    needs: [lint, test, build, security]
    if: always()
    
    steps:
      - name: Report Status
        run: |
          echo "## 🎯 Frontend CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Type Check | ${{ needs.lint.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
