name: Frontend CI/CD

on:
  push:
    branches: [main, nextjs, develop]
    paths:
      - 'apps/web/**'
      - 'packages/**'
      - '.github/workflows/frontend-ci.yml'
  pull_request:
    branches: [main, nextjs]
    paths:
      - 'apps/web/**'
      - 'packages/**'
      - '.github/workflows/frontend-ci.yml'
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/web
  NODE_VERSION: '20'
  CACHE_VERSION: v1

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read
  id-token: write

jobs:
  
  # Code Quality & Security Analysis
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
      
      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=${{ env.CACHE_VERSION }}-${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('**/yarn.lock', 'package.json') }}" >> $GITHUB_OUTPUT
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock'
      
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/web/node_modules
            packages/*/node_modules
            ~/.cache/yarn
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-${{ runner.os }}-node-${{ env.NODE_VERSION }}-
      
      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline
      
      - name: Run ESLint with SARIF output
        run: |
          cd apps/web
          yarn lint --format @microsoft/eslint-formatter-sarif --output-file eslint-results.sarif || echo "ESLint completed with warnings/errors"
        continue-on-error: true
      
      - name: Upload ESLint SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('apps/web/eslint-results.sarif') != ''
        with:
          sarif_file: apps/web/eslint-results.sarif
          category: eslint
        continue-on-error: true
      
      - name: Run TypeScript compilation
        run: |
          cd apps/web
          yarn tsc --noEmit --incremental
      
      - name: Dependency vulnerability scan
        run: |
          cd apps/web
          yarn audit --json > audit-results.json || true
          yarn audit --level high --groups dependencies
        continue-on-error: true
      
      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: audit-results
          path: apps/web/audit-results.json
          retention-days: 7

  
  # Testing Pipeline
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: code-quality
    timeout-minutes: 20
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        test-type: [unit, integration]
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'
      
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/web/node_modules
            packages/*/node_modules
            ~/.cache/yarn
          key: ${{ needs.code-quality.outputs.cache-key }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-${{ runner.os }}-node-${{ matrix.node-version }}-
      
      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline
      
      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: |
          cd apps/web
          yarn test --coverage --watchAll=false --maxWorkers=2
        env:
          CI: true
          NODE_ENV: test
      
      - name: Run integration tests
        if: matrix.test-type == 'integration'
        run: |
          cd apps/web
          yarn test:integration --watchAll=false
        env:
          CI: true
          NODE_ENV: test
        continue-on-error: true
      
      - name: Generate test report
        if: always()
        run: |
          cd apps/web
          yarn test --watchAll=false --reporters=jest-junit --outputFile=test-results.xml
        env:
          CI: true
        continue-on-error: true
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.node-version }}-${{ matrix.test-type }}
          path: |
            apps/web/coverage/
            apps/web/test-results.xml
          retention-days: 7
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.node-version == '20.x' && matrix.test-type == 'unit'
        with:
          files: ./apps/web/coverage/lcov.info
          flags: frontend
          name: frontend-coverage-${{ matrix.node-version }}
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  
  # Build & Security Scanning
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    timeout-minutes: 20
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/web/node_modules
            packages/*/node_modules
            ~/.cache/yarn
          key: ${{ needs.code-quality.outputs.cache-key }}
      
      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline
      
      - name: Build application
        run: |
          cd apps/web
          yarn build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
      
      - name: Analyze bundle size
        run: |
          cd apps/web
          npx @next/bundle-analyzer || true
        continue-on-error: true
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/web/.next/
            apps/web/public/
          retention-days: 7
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
          labels: |
            org.opencontainers.image.title=Container Directory Web
            org.opencontainers.image.description=Next.js frontend for container directory
            org.opencontainers.image.vendor=broadsage
      
      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/web/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/image.tar
      
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/image.tar
          retention-days: 1

  
  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp
      
      - name: Load Docker image
        run: docker load --input /tmp/image.tar
      
      - name: Run Trivy vulnerability scanner
        run: |
          # Get the first tag from the loaded image
          IMAGE_TAG=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} | head -n1)
          echo "Scanning image: $IMAGE_TAG"
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image --format table --output trivy-results.txt "$IMAGE_TAG" || true
        continue-on-error: true
      
      - name: Upload Trivy scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-results
          path: trivy-results.txt
          retention-days: 7
        continue-on-error: true
      
      - name: Run Snyk container scan  
        if: env.SNYK_TOKEN != ''
        run: |
          # Get the first tag from the loaded image
          IMAGE_TAG=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} | head -n1)
          echo "Snyk scanning image: $IMAGE_TAG"
          npx snyk container test "$IMAGE_TAG" --severity-threshold=high --file=apps/web/Dockerfile || true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

  # Publish Docker Image
  publish:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/nextjs')
    timeout-minutes: 10
    
    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp
      
      - name: Load Docker image
        run: docker load --input /tmp/image.tar
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Push Docker image
        run: |
          # Get all tags for this image
          TAGS=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} | grep -v "<none>" || true)
          
          # Push each tag
          echo "$TAGS" | while read -r tag; do
            if [ ! -z "$tag" ] && [ "$tag" != "REPOSITORY:TAG" ]; then
              echo "Pushing $tag"
              docker push "$tag"
            fi
          done
      
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: spdx-json
          output-file: sbom.spdx.json
      
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json
          retention-days: 30


  # Deployment Readiness
  deployment-readiness:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [publish]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Deployment readiness check
        run: |
          echo "✅ All checks passed! Ready for deployment."
          echo "🚀 Image published: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          echo "📦 SBOM generated and available in artifacts"
          echo "🔒 Security scans completed"
          echo "✨ Application built and tested successfully"
