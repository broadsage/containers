name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: false
        default: 'auto'
        type: choice
        options:
        - auto
        - beta
        - patch
        - minor
        - major

env:
  NODE_VERSION: '20'

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    
    outputs:
      new-release-published: ${{ steps.semantic-release.outputs.new-release-published }}
      new-release-version: ${{ steps.semantic-release.outputs.new-release-version }}
      new-release-major-version: ${{ steps.semantic-release.outputs.new-release-major-version }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      
      - name: Lint
        run: yarn turbo lint
      
      - name: Type check
        run: yarn turbo type-check
      
      - name: Test
        run: |
          cd apps/web
          yarn test --coverage --watchAll=false --maxWorkers=2
        env:
          CI: true
      
      - name: Security audit
        run: |
          yarn audit --level moderate --groups dependencies
        continue-on-error: true
      
      - name: Build
        run: yarn turbo build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
      
      - name: Release
        id: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          if [[ "${{ github.event.inputs.release_type }}" == "beta" ]]; then
            echo "Creating beta release..."
            git checkout -b beta
            yarn release
          else
            yarn release
          fi

  summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [release]
    if: always()
    
    steps:
      - name: Release Summary
        run: |
          echo "## 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Item | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Release Job | ${{ needs.release.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.release.outputs.new-release-published }}" == "true" ]]; then
            echo "| New Release | ✅ Published v${{ needs.release.outputs.new-release-version }} |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📦 Artifacts" >> $GITHUB_STEP_SUMMARY
            echo "- **Git Tag**: v${{ needs.release.outputs.new-release-version }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Release Notes**: [View Release](https://github.com/${{ github.repository }}/releases/tag/v${{ needs.release.outputs.new-release-version }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "| New Release | ⏭️ No release (no relevant changes) |" >> $GITHUB_STEP_SUMMARY
          fi