name: CI

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/**'
      - 'packages/**'
      - '.github/workflows/ci.yml'
      - 'package.json'
      - 'yarn.lock'
      - 'turbo.json'
  pull_request:
    branches: [main, develop]
    paths:
      - 'apps/**'
      - 'packages/**'
      - '.github/workflows/ci.yml'
      - 'package.json'
      - 'yarn.lock'
      - 'turbo.json'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}
  FORCE_COLOR: 3

permissions:
  contents: read
  pull-requests: write
  checks: write
  security-events: write

jobs:
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline
      
      - name: Lint
        run: yarn turbo lint
        env:
          CI: true
      
      - name: Type check
        run: yarn turbo type-check
        env:
          CI: true
      
      - name: Run ESLint with SARIF
        run: |
          cd apps/web
          yarn lint --format @microsoft/eslint-formatter-sarif --output-file ../../eslint-results.sarif || true
        continue-on-error: true
      
      - name: Upload ESLint SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('eslint-results.sarif') != ''
        with:
          sarif_file: eslint-results.sarif
          category: eslint

  test:
    name: Test (${{ matrix.test-type }})
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      fail-fast: false
      matrix:
        test-type: [unit, integration]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline
      
      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: |
          cd apps/web
          yarn test:coverage --ci --maxWorkers=2 --bail
        env:
          CI: true
      
      - name: Run integration tests
        if: matrix.test-type == 'integration'
        run: |
          cd apps/web
          yarn test:integration --ci --maxWorkers=2
        env:
          CI: true
        continue-on-error: true
      
      - name: Upload coverage to Codecov
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v4
        with:
          files: ./apps/web/coverage/lcov.info
          flags: frontend-${{ matrix.test-type }}
          name: ${{ matrix.test-type }}-coverage
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            apps/web/coverage/
            apps/web/junit.xml
          retention-days: 7
          if-no-files-found: warn

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [quality, test]
    timeout-minutes: 15
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline
      
      - name: Build packages
        run: yarn turbo build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/web/.next/
            apps/web/out/
            packages/*/dist/
          retention-days: 7
          if-no-files-found: warn
      
      - name: Generate build summary
        run: |
          echo "## üì¶ Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Build completed successfully" >> $GITHUB_STEP_SUMMARY
          if [ -d "apps/web/.next" ]; then
            NEXT_SIZE=$(du -sh apps/web/.next | cut -f1)
            echo "- Next.js build size: **$NEXT_SIZE**" >> $GITHUB_STEP_SUMMARY
          fi

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline
      
      - name: Run yarn audit
        run: |
          yarn audit --json > audit-results.json || true
          yarn audit --level moderate --groups dependencies
        continue-on-error: true
      
      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit
          path: audit-results.json
          retention-days: 30

  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    timeout-minutes: 20
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/web/Dockerfile
          push: false
          tags: containers/web:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_VERSION=${{ env.NODE_VERSION }}

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [quality, test, build, security]
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "## üéØ CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.quality.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result == 'success' && '‚úÖ Passed' || needs.test.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | ${{ needs.security.result == 'success' && '‚úÖ Passed' || needs.security.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ö†Ô∏è Review Required' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
      
      - name: Check overall status
        if: |
          needs.quality.result != 'success' ||
          needs.test.result != 'success' ||
          needs.build.result != 'success'
        run: |
          echo "‚ùå One or more CI jobs failed"
          exit 1
