name: Docker CI

on:
  push:
    branches: [main]
    paths:
      - 'apps/web/**'
      - 'packages/**'
      - 'docker-compose.yml'
      - 'Dockerfile'
      - '.github/workflows/docker-ci.yml'
  pull_request:
    branches: [main]
    paths:
      - 'apps/web/**'
      - 'packages/**'
      - 'docker-compose.yml'
      - 'Dockerfile'
      - '.github/workflows/docker-ci.yml'
  workflow_call:
    inputs:
      platforms:
        description: 'Target platforms for Docker build'
        required: false
        default: 'linux/amd64'
        type: string
      push:
        description: 'Whether to push the Docker image'
        required: false
        default: false
        type: boolean
      tag:
        description: 'Tag for the Docker image'
        required: false
        default: 'latest'
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/web

jobs:
  docker-build:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      packages: write
      security-events: write
      id-token: write
      attestations: write

    strategy:
      matrix:
        platform: ${{ fromJSON(inputs.platforms || (github.event_name == 'push' && github.ref == 'refs/heads/main' && '["linux/amd64", "linux/arm64"]') || '["linux/amd64"]') }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:buildx-stable-1
            network=host

      - name: Log in to Container Registry
        if: ${{ inputs.push || github.event_name == 'push' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}},value=${{ inputs.tag }},enable=${{ inputs.tag != '' && inputs.tag != 'latest' }}
            type=semver,pattern={{major}}.{{minor}},value=${{ inputs.tag }},enable=${{ inputs.tag != '' && inputs.tag != 'latest' }}
            type=semver,pattern={{major}},value=${{ inputs.tag }},enable=${{ inputs.tag != '' && inputs.tag != 'latest' }}
            type=raw,value=${{ inputs.tag || 'latest' }}

      # Download build artifacts if available (from frontend-ci workflow)
      - name: Download build artifacts
        id: download-artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: build-output
          path: ./build-artifacts

      - name: Check for build artifacts
        id: check-artifacts
        run: |
          if [ -d "./build-artifacts" ] && [ "$(ls -A ./build-artifacts)" ]; then
            echo "artifacts-available=true" >> $GITHUB_OUTPUT
            echo "Build artifacts found, will use them"
          else
            echo "artifacts-available=false" >> $GITHUB_OUTPUT
            echo "No build artifacts found, will build from source"
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        id: build
        with:
          context: .
          file: ./apps/web/Dockerfile
          platforms: ${{ matrix.platform }}
          push: ${{ inputs.push || github.event_name == 'push' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=${{ matrix.platform }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            USE_BUILD_ARTIFACTS=${{ steps.check-artifacts.outputs.artifacts-available }}

      - name: Generate SBOM
        if: ${{ inputs.push || github.event_name == 'push' }}
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        if: ${{ inputs.push || github.event_name == 'push' }}
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ matrix.platform }}
          path: sbom.spdx.json

      - name: Run Trivy vulnerability scanner
        if: ${{ inputs.push || github.event_name == 'push' }}
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        if: ${{ inputs.push || github.event_name == 'push' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  docker-test:
    name: Docker Image Test
    runs-on: ubuntu-latest
    needs: docker-build
    if: ${{ !cancelled() && needs.docker-build.result == 'success' }}
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Test Docker image
        run: |
          # Pull the image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
          # Run basic smoke test
          docker run --rm -d \
            --name test-container \
            -p 3000:3000 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
          # Wait for container to start
          sleep 10
          
          # Test health endpoint
          curl -f http://localhost:3000 || exit 1
          
          # Clean up
          docker stop test-container

  summary:
    name: Docker CI Summary
    runs-on: ubuntu-latest
    needs: [docker-build, docker-test]
    if: always()
    
    steps:
      - name: Summary
        run: |
          echo "## Docker CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.docker-build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Test | ${{ needs.docker-test.result }} |" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.docker-build.result }}" == "success" && "${{ needs.docker-test.result }}" == "success" ]]; then
            echo "✅ All Docker CI jobs completed successfully"
            exit 0
          else
            echo "❌ Some Docker CI jobs failed"
            exit 1
          fi